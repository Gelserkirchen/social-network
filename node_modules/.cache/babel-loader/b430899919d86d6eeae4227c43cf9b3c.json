{"ast":null,"code":"import { profileAPI } from '../../api/api';\nconst ADD_POST = 'ADD_POST';\nconst SET_USERS_PROFILE = 'SET_USERS_PROFILE';\nconst GET_USER_PROFILE_STATUS = 'GET_USER_PROFILE_STATUS';\nconst SAVE_PHOTOS_SUCCESS = 'SAVE_PHOTOS_SUCCESS';\nexport const addPostAction = text => ({\n  type: ADD_POST,\n  value: text\n});\nexport const setProfileUsersAction = profile => ({\n  type: SET_USERS_PROFILE,\n  value: profile\n});\nexport const getProfileStatusAction = value => ({\n  type: GET_USER_PROFILE_STATUS,\n  status: value\n});\nexport const savePhotoSuccess = photos => ({\n  type: SAVE_PHOTOS_SUCCESS,\n  photos: photos\n});\nconst initialState = {\n  PostsData: [{\n    id: '1',\n    message: 'Hi it is my first post'\n  }, {\n    id: '2',\n    message: 'This is second post'\n  }],\n  profile: {\n    photos: {\n      small: null,\n      large: null\n    }\n  },\n  status: \"\",\n  authorisedUserId: 16637\n};\n\nconst profileReducer = (state = initialState, action) => {\n  if (!action) {\n    return;\n  }\n\n  switch (action.type) {\n    case ADD_POST:\n      return { ...state,\n        PostsData: [...state.PostsData, {\n          id: action.id,\n          message: action.value,\n          likes: '0'\n        }]\n      };\n\n    case SET_USERS_PROFILE:\n      return { ...state,\n        profile: action.value\n      };\n\n    case GET_USER_PROFILE_STATUS:\n      return { ...state,\n        status: action.status\n      };\n\n    case SAVE_PHOTOS_SUCCESS:\n      return { ...state,\n        profile: { ...state.profile,\n          photos: action.photos\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default profileReducer; // Thunk for get profile \n\nexport const getProfile = userId => {\n  return async dispatch => {\n    const response = await profileAPI.getUsersProfile(userId);\n    dispatch(setProfileUsersAction(response.data));\n  };\n}; // Thunk for get profile \n\nexport const getProfileStatus = userId => {\n  debugger;\n  return async dispatch => {\n    const response = await profileAPI.getStatus(userId);\n    dispatch(getProfileStatusAction(response.data));\n  };\n}; // Thunk for updating profile status\n\nexport const updateProfileStatus = status => {\n  return async dispatch => {\n    const response = await profileAPI.updateStatus(status);\n\n    if (response.data.resultCode === 0) {\n      dispatch(getProfileStatusAction(status));\n    }\n  };\n}; // Thunk for updating profile photo\n\nexport const savePhoto = file => {\n  return async dispatch => {\n    const response = await profileAPI.savePhoto(file);\n\n    if (response.data.resultCode === 0) {\n      debugger;\n      dispatch(savePhotoSuccess(response.data.data.photos));\n    }\n  };\n}; // Thunk for add post form messages in profile\n\nexport const addPost = text => {\n  return dispatch => {\n    dispatch(addPostAction(text));\n  };\n};","map":{"version":3,"sources":["/Users/tolstyhandrejaleksandrovic/Documents/GitHub/social-network/src/redux/reducers/profileReducer.js"],"names":["profileAPI","ADD_POST","SET_USERS_PROFILE","GET_USER_PROFILE_STATUS","SAVE_PHOTOS_SUCCESS","addPostAction","text","type","value","setProfileUsersAction","profile","getProfileStatusAction","status","savePhotoSuccess","photos","initialState","PostsData","id","message","small","large","authorisedUserId","profileReducer","state","action","likes","getProfile","userId","dispatch","response","getUsersProfile","data","getProfileStatus","getStatus","updateProfileStatus","updateStatus","resultCode","savePhoto","file","addPost"],"mappings":"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","sourcesContent":["import { profileAPI } from '../../api/api'\n\nconst ADD_POST = 'ADD_POST'\nconst SET_USERS_PROFILE = 'SET_USERS_PROFILE'\nconst GET_USER_PROFILE_STATUS = 'GET_USER_PROFILE_STATUS'\nconst SAVE_PHOTOS_SUCCESS = 'SAVE_PHOTOS_SUCCESS'\n\nexport const addPostAction = (text) => ({\n  type: ADD_POST,\n  value: text\n})\n\nexport const setProfileUsersAction = (profile) => (\n  {type: SET_USERS_PROFILE,\n   value: profile}\n)\n\nexport const getProfileStatusAction = (value) => ({\n  type: GET_USER_PROFILE_STATUS,\n  status: value\n})\n\nexport const savePhotoSuccess = (photos) => (\n  {\n  type: SAVE_PHOTOS_SUCCESS,\n  photos: photos\n})\n\nconst initialState = {\n  PostsData: [\n    {id: '1', message: 'Hi it is my first post'},\n    {id: '2', message: 'This is second post'}\n  ],\n  profile: {\n    photos: {\n      small: null,\n      large: null\n    },\n  },\n  status: \"\",\n  authorisedUserId: 16637\n}\n\nconst profileReducer = (state = initialState, action) => {\n  if (!action) {\n    return \n  }\n\n  switch (action.type) {\n    case ADD_POST:\n      return {\n        ...state,\n        PostsData: [...state.PostsData, {id: action.id, message: action.value, likes: '0'}],\n      }\n\n    case SET_USERS_PROFILE:\n      return {\n        ...state,\n        profile: action.value\n      }\n\n    case GET_USER_PROFILE_STATUS:\n      return {\n        ...state,\n        status: action.status\n      }\n\n    case SAVE_PHOTOS_SUCCESS:\n      return {\n        ...state,\n        profile: {...state.profile, photos: action.photos}\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default profileReducer\n\n// Thunk for get profile \nexport const getProfile = (userId) => {\n  return async (dispatch) => {\n    const response = await profileAPI.getUsersProfile(userId);\n    dispatch(setProfileUsersAction(response.data))\n  }\n}\n\n// Thunk for get profile \nexport const getProfileStatus = (userId) => {\n  debugger\n  return async (dispatch) => {\n    const response = await profileAPI.getStatus(userId)\n    dispatch(getProfileStatusAction(response.data))\n  }\n}\n\n// Thunk for updating profile status\nexport const updateProfileStatus = (status) => {\n  return async (dispatch) => {\n    const response = await profileAPI.updateStatus(status)\n    if (response.data.resultCode === 0) {\n      dispatch(getProfileStatusAction(status))\n    }\n  }\n}\n\n// Thunk for updating profile photo\nexport const savePhoto = (file) => {\n  return async (dispatch) => {\n    const response = await profileAPI.savePhoto(file)\n    if (response.data.resultCode === 0) {\n      debugger\n      dispatch(savePhotoSuccess(response.data.data.photos))\n    }\n  }\n}\n\n// Thunk for add post form messages in profile\nexport const addPost = (text) => {\n  return (dispatch) => {\n    dispatch(addPostAction(text))\n  }\n}"]},"metadata":{},"sourceType":"module"}