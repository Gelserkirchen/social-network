{"ast":null,"code":"import { stopSubmit } from 'redux-form';\nimport { authAPI } from '../../api/api';\nconst SET_USER_DATA = 'samuraiNetwork/auth/SET_USER_DATA';\nconst initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  // debugger\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        isAuth: true,\n        ...action.data\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;\nexport const setAuthUserData = (id, login, email, isAuth) => ({\n  type: SET_USER_DATA,\n  data: {\n    id,\n    login,\n    email,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => {\n  return async dispatch => {\n    let response = await authAPI.me();\n\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(response.data.data.id, response.data.data.login, response.data.data.email, true));\n    } else {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  };\n};\nexport const login = (email, password, rememberMe) => {\n  return async dispatch => {\n    let response = await authAPI.login(email, password, rememberMe);\n\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    } else {\n      let nameOfError = response.data.messages.length > 0 ? response.data.messages[0] : \"some error\";\n      dispatch(stopSubmit('login', {\n        _error: nameOfError\n      }));\n    }\n  };\n};\nexport const logout = () => {\n  return async dispatch => {\n    let response = await authAPI.logout();\n\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    }\n  };\n};","map":{"version":3,"sources":["/Users/tolstyhandrejaleksandrovic/Documents/GitHub/social-network/src/redux/reducers/authReducer.js"],"names":["stopSubmit","authAPI","SET_USER_DATA","initialState","id","email","login","isAuth","authReducer","state","action","type","data","setAuthUserData","getAuthUserData","dispatch","response","me","resultCode","password","rememberMe","nameOfError","messages","length","_error","logout"],"mappings":"AAAA,SAASA,UAAT,QAA2B,YAA3B;AACA,SAASC,OAAT,QAAwB,eAAxB;AAEA,MAAMC,aAAa,GAAG,mCAAtB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,EAAE,EAAE,IADa;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAArB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD;AACA,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHF,QAAAA,MAAM,EAAE,IAFL;AAGH,WAAGG,MAAM,CAACE;AAHP,OAAP;;AAKJ;AACI,aAAOH,KAAP;AARR;AAUH,CAZD;;AAcA,eAAeD,WAAf;AAEA,OAAO,MAAMK,eAAe,GAAG,CAACT,EAAD,EAAKE,KAAL,EAAYD,KAAZ,EAAmBE,MAAnB,MAA+B;AAC1DI,EAAAA,IAAI,EAAET,aADoD;AAE1DU,EAAAA,IAAI,EAAE;AAACR,IAAAA,EAAD;AAAKE,IAAAA,KAAL;AAAYD,IAAAA,KAAZ;AAAmBE,IAAAA;AAAnB;AAFoD,CAA/B,CAAxB;AAKP,OAAO,MAAMO,eAAe,GAAG,MAAM;AACjC,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAIC,QAAQ,GAAG,MAAMf,OAAO,CAACgB,EAAR,EAArB;;AAEA,QAAID,QAAQ,CAACJ,IAAT,CAAcM,UAAd,KAA6B,CAAjC,EAAoC;AAC5BH,MAAAA,QAAQ,CAACF,eAAe,CACpBG,QAAQ,CAACJ,IAAT,CAAcA,IAAd,CAAmBR,EADC,EAEpBY,QAAQ,CAACJ,IAAT,CAAcA,IAAd,CAAmBN,KAFC,EAGpBU,QAAQ,CAACJ,IAAT,CAAcA,IAAd,CAAmBP,KAHC,EAIpB,IAJoB,CAAhB,CAAR;AAMP,KAPD,MAOO;AACCU,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACP;AACJ,GAbD;AAcH,CAfM;AAiBP,OAAO,MAAMP,KAAK,GAAG,CAACD,KAAD,EAAQc,QAAR,EAAkBC,UAAlB,KAAiC;AAClD,SAAO,MAAOL,QAAP,IAAoB;AACvB,QAAIC,QAAQ,GAAG,MAAMf,OAAO,CAACK,KAAR,CAAcD,KAAd,EAAqBc,QAArB,EAA+BC,UAA/B,CAArB;;AACA,QAAIJ,QAAQ,CAACJ,IAAT,CAAcM,UAAd,KAA6B,CAAjC,EAAoC;AAChCH,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,KAFD,MAEO;AACH,UAAIO,WAAW,GAAGL,QAAQ,CAACJ,IAAT,CAAcU,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCP,QAAQ,CAACJ,IAAT,CAAcU,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAAlF;AACAP,MAAAA,QAAQ,CAACf,UAAU,CAAC,OAAD,EAAU;AAACwB,QAAAA,MAAM,EAAEH;AAAT,OAAV,CAAX,CAAR;AACH;AACJ,GARD;AASH,CAVM;AAYP,OAAO,MAAMI,MAAM,GAAG,MAAM;AACxB,SAAO,MAAOV,QAAP,IAAoB;AACvB,QAAIC,QAAQ,GAAG,MAAMf,OAAO,CAACwB,MAAR,EAArB;;AAEA,QAAIT,QAAQ,CAACJ,IAAT,CAAcM,UAAd,KAA6B,CAAjC,EAAoC;AAChCH,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH;AAEJ,GAPD;AAQH,CATM","sourcesContent":["import { stopSubmit } from 'redux-form'\nimport { authAPI } from '../../api/api'\n\nconst SET_USER_DATA = 'samuraiNetwork/auth/SET_USER_DATA'\n\nconst initialState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\nconst authReducer = (state = initialState, action) => {\n    // debugger\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                isAuth: true,\n                ...action.data,\n            }\n        default:\n            return state\n    }\n}\n\nexport default authReducer\n\nexport const setAuthUserData = (id, login, email, isAuth) => ({\n    type: SET_USER_DATA,\n    data: {id, login, email, isAuth}    \n}) \n\nexport const getAuthUserData = () => {\n    return async (dispatch) => {\n        let response = await authAPI.me();\n\n        if (response.data.resultCode === 0) {\n                dispatch(setAuthUserData(\n                    response.data.data.id, \n                    response.data.data.login, \n                    response.data.data.email,\n                    true,\n                    ))\n        } else {\n                dispatch(setAuthUserData(null, null, null, false))\n        }\n    }\n}\n\nexport const login = (email, password, rememberMe) => {\n    return async (dispatch) => {\n        let response = await authAPI.login(email, password, rememberMe);\n        if (response.data.resultCode === 0) {\n            dispatch(getAuthUserData())\n        } else {\n            let nameOfError = response.data.messages.length > 0 ? response.data.messages[0] : \"some error\"\n            dispatch(stopSubmit('login', {_error: nameOfError}))\n        }\n    }\n}\n\nexport const logout = () => {\n    return async (dispatch) => {\n        let response = await authAPI.logout();\n\n        if (response.data.resultCode === 0) {\n            dispatch(getAuthUserData())\n        }\n\n    }\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}